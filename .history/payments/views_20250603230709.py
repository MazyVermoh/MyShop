from __future__ import annotations

"""
payments/views.py
~~~~~~~~~~~~~~~~~
-  /payments/tbank/start/<order_id>/  ‚Äì (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç—ë–∂ –µ—â—ë —Ä–∞–∑
-  /payments/tbank/hook/             ‚Äì –≤–µ–±-—Ö—É–∫: T-Bank —à–ª—ë—Ç POST-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

–µ—Å–ª–∏ –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤–µ–±-—Ö—É–∫ ‚Äì route ¬´start¬ª –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å
"""

import json
from http import HTTPStatus
from typing import Any, Dict

from django.conf import settings
from django.http import (
    HttpRequest,
    HttpResponse,
    HttpResponseBadRequest,
    JsonResponse,
)
from django.shortcuts import get_object_or_404, redirect
from django.urls import reverse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST, require_http_methods

from payments import tbank as tbank_gateway                       # ‚Üê –Ω–∞—à wrapper
from payments.models import TBankPayment
from store.models import Order

# ----------------------------------------------------------------------
#  1. (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Ä—É—á–Ω–æ–π —Å—Ç–∞—Ä—Ç –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π
# ----------------------------------------------------------------------
@require_http_methods(["GET"])
def tbank_start(request: HttpRequest, order_id: int) -> HttpResponse:
    """
    –î–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å¬ª, –µ—Å–ª–∏ —Å—á—ë—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω,
    –Ω–æ –æ–Ω –ø–µ—Ä–µ–¥—É–º–∞–ª –≤ –º–æ–º–µ–Ω—Ç–µ.  –í—ã–∑—ã–≤–∞–µ—Ç /Init –µ—â—ë —Ä–∞–∑ –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç
    –Ω–∞ plat—ë–∂–Ω—É—é —Ñ–æ—Ä–º—É T-Bank.

    –ï—Å–ª–∏ –≤–∞–º –Ω–µ –Ω—É–∂–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å ‚Äì —É–¥–∞–ª–∏—Ç–µ –≤–µ—Å—å view + –º–∞—Ä—à—Ä—É—Ç.
    """
    order = get_object_or_404(Order, id=order_id)

    # –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω ‚Äì —Å—Ä–∞–∑—É —É—Å–ø–µ—à–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if getattr(order, "status", "") == "paid":
        return redirect("checkout:success", order.id)

    # (re)-—Å–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂
    resp = tbank.init_payment(
        order_id=str(order.id),
        amount_rub=order.total_to_pay(),          # –∏–ª–∏ –∏–Ω–æ–µ –ø–æ–ª–µ
        description=f"–ó–∞–∫–∞–∑ #{order.id}",
        receipt=None,                             # —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ —á–µ–∫ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
        success_url=request.build_absolute_uri(
            reverse("checkout:success", args=[order.id])
        ),
        fail_url=request.build_absolute_uri(
            reverse("checkout:failure", args=[order.id])
        ),
    )

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º / –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    pay, _ = TBankPayment.objects.update_or_create(
        order=order,
        defaults={
            "payment_id": resp["PaymentId"],
            "amount": resp["Amount"],
            "status": resp["Status"],
            "raw_response": resp,
        },
    )
    pay.refresh_from_db()                         # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

    return redirect(resp["PaymentURL"])


# ----------------------------------------------------------------------
#  2. –≤–µ–±-—Ö—É–∫ –æ—Ç –±–∞–Ω–∫–∞
# ----------------------------------------------------------------------
@csrf_exempt                       # T-Bank –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç CSRF-cookie
@require_POST
def tbank_hook(request: HttpRequest) -> HttpResponse:
    """
    –ü–æ–ª—É—á–∞–µ–º POST-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç T-Bank, –≤–∞–ª–∏–¥–∏—Ä—É–µ–º Token,
    –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ + —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.
    """

    # ---- —Ä–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–ª–æ ------------------------------------------------
    if request.META.get("CONTENT_TYPE", "").startswith("application/json"):
        try:
            data: Dict[str, Any] = json.loads(request.body)
        except json.JSONDecodeError:
            return HttpResponseBadRequest("invalid json")
    else:                                           # x-www-form-urlencoded
        data = request.POST.dict()

    # ---- –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å -------------------------------------------
    if not tbank.validate_webhook(data.copy()):     # .copy() ‚Üí –Ω–µ –ø–æ—Ä—Ç–∏–º dict
        return HttpResponseBadRequest("wrong token")

    payment_id = data.get("PaymentId")
    status     = data.get("Status")

    if not payment_id or not status:
        return HttpResponseBadRequest("missing fields")

    # ---- –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç—ë–∂–∞ -------------------------------------
    try:
        payment = TBankPayment.objects.select_related("order").get(
            payment_id=payment_id
        )
    except TBankPayment.DoesNotExist:
        # —á—É–∂–æ–π PaymentId ‚Äì –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –Ω–æ –æ—Ç–≤–µ—á–∞–µ–º 200 (–∏–Ω–∞—á–µ –±–∞–Ω–∫ —Ä–µ—Ç—Ä–∞–∏—Ç)
        return HttpResponse("ignored", status=HTTPStatus.OK)

    payment.status       = status
    payment.raw_response = data
    payment.save(update_fields=["status", "raw_response", "updated"])

    # ---- —É—Å–ø–µ—à–Ω—ã–π –ª–∏ —Å—Ç–∞—Ç—É—Å? ------------------------------------------
    SUCCESS_STATUSES = {"CONFIRMED", "AUTHORIZED", "COMPLETED"}

    if status in SUCCESS_STATUSES:
        _mark_order_paid(payment.order)

    return JsonResponse({"Success": True})


# ----------------------------------------------------------------------
#  –í—Å–ø–æ–º-—Ñ—É–Ω–∫—Ü–∏–∏
# ----------------------------------------------------------------------
def _mark_order_paid(order: Order) -> None:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–∫–∞–∑ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ¬´paid¬ª (–∏–ª–∏ –≤–∞—à–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ),
    –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω.
    """
    if getattr(order, "status", "") == "paid":
        return

    order.status = "paid"
    order.save(update_fields=["status", "updated"])

    # üëâ  —Ç—É—Ç –º–æ–∂–Ω–æ:
    #   ‚Ä¢ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –∫–ª–∏–µ–Ω—Ç—É
    #   ‚Ä¢ —É–≤–µ–¥–æ–º–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    #   ‚Ä¢ –≤—ã–∑–≤–∞—Ç—å –ª—é–±–æ–π –¥—Ä—É–≥–æ–π post-processing